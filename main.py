from data_generator import generate_data
from data_analyzer import slice_1D, slice_2D, slice_3D, slice_4D, copy_view, reshape_array, join, split, search, sort
import numpy as np

def main():
    # Load data
    bias, techs_labels, tech, weights, techs, tech_group_labels, tech_groups, tech_locations, tech_locations_labels= generate_data()

    # Slice 1D data
    basic, intermediate, advanced, w_scalability, w_automation, w_real_time_processing, w_interpretability, w_efficiency, w_combined_score, core_weights, quality_weights = slice_1D(techs_labels, weights)

    # Print 1D data
    print(f"Tech Labels\nBasic: {basic}, Intermediate: {intermediate}, Advanced: {advanced}")
    print("\n")
    for x in techs_labels:
        print(x)
    print("\n")
    print(f"Tech 1 is labeled as: {basic} (Basic)")
    print(f"Tech 2 is labeled as: {intermediate} (Intermediate)")
    print(f"Tech 3 is labeled as: {advanced} (Advanced)")
    print("\n")

    print(f"Tech Weights: {weights}")
    for x in weights:
        print(x)
    print("\n")
    print("Scalability Weight:", w_scalability)
    print("Automation Weight:", w_automation)
    print("Real-time Processing Weight:", w_real_time_processing)
    print("Interpretability Weight:", w_interpretability)
    print("Efficiency Weight:", w_efficiency)
    print("Combined Score Weight:", w_combined_score)
    print("\n")
    print("Core Weights:", core_weights)
    print("Quality Weights:", quality_weights)
    print("\n")

    # Slice 2D data
    scalability, automation, real_time_processing, interpretability, efficiency, combined_score, performance_features, tech2, scalability2, automation2, real_time_processing2, interpretability2, efficiency2, combined_score2, tech3, scalability3, automation3, real_time_processing3, interpretability3, efficiency3, combined_score3, core_features_scores, legacy, modern, nextgen = slice_2D(tech, techs, tech_group_labels)

    # Print 2D data
    print(f"Tech 1 Features: {tech}")
    print("Scalability:", scalability)
    print("Automation:", automation)
    print("Real-time Processing:", real_time_processing)
    print("Interpretability:", interpretability)
    print("Efficiency:", efficiency)
    print("Combined Score:", combined_score)
    print("\n")
    print("Iterating Tech 1 Features:")
    for x in tech:
        for y in x:
            print(y)
    print("\n")
    #print("Intelligent Features (Tech 1):", intelligent_features_tech)
    print(f"Performance Features: {performance_features}")
    print("\n")

    print(f"Tech 2 Features: {tech2}")
    print("Scalability:", scalability2)
    print("Automation:", automation2)
    print("Real-time Processing:", real_time_processing2)
    print("Interpretability:", interpretability2)
    print("Efficiency:", efficiency2)
    print("Combined Score:", combined_score2)
    print("\n")

    print(f"Tech 3 Features: {tech3}")
    print("Scalability:", scalability3)
    print("Automation:", automation3)
    print("Real-time Processing:", real_time_processing3)
    print("Interpretability:", interpretability3)
    print("Efficiency:", efficiency3)
    print("Combined Score:", combined_score3)
    print("\n")
    print("Iterating Techs:")
    for x in techs:
        for y in x:
            print(y)
    print("\n")
    #print("Efficiency Scores:", efficiency_scores)
    #print("Scalability Scores:", scalability_scores)
    print(f"Core Features Scores:\n {core_features_scores}")
    print("\n")

    print(f"Tech Group Labels\nLegacy: {legacy}, Modern: {modern}, NextGen: {nextgen}")
    print("\n")
    print(f"Tech 1 in each group is labeled as: {legacy} (Legacy)")
    print(f"Tech 2 in each group is labeled as: {modern} (Modern)")
    print(f"Tech 3 in each group is labeled as: {nextgen} (NextGen)")
    print("\n")

    print("Iterating Tech Group Labels:")
    for x in tech_group_labels:
        for y in x:
            print(y)
    print("\n")

    # Slice 3D data
    tech_group2, tech2_1, scalability2_1, automation2_1, real_time_processing2_1, interpretability2_1, efficiency2_1, combined_score2_1, tech2_2, scalability2_2, automation2_2, real_time_processing2_2, interpretability2_2, efficiency2_2, combined_score2_2, tech2_3, scalability2_3, automation2_3, real_time_processing2_3, interpretability2_3, efficiency2_3, combined_score2_3, tech_group3, tech3_1, scalability3_1, automation3_1, real_time_processing3_1, interpretability3_1, efficiency3_1, combined_score3_1, tech3_2, scalability3_2, automation3_2, real_time_processing3_2, interpretability3_2, efficiency3_2, combined_score3_2, tech3_3, scalability3_3, automation3_3, real_time_processing3_3, interpretability3_3, efficiency3_3, combined_score3_3, group_1_automation, cloud, edge, on_premises = slice_3D(tech_groups, tech_locations_labels)

    # Print 3D data
    print(f"Tech Group 2 Features:\n {tech_group2}")
    print(f"Tech 1 Features: {tech2_1}")
    print("Scalability:", scalability2_1)
    print("Automation:", automation2_1)
    print("Real-time Processing:", real_time_processing2_1)
    print("Interpretability:", interpretability2_1)
    print("Efficiency:", efficiency2_1)
    print("Combined Score:", combined_score2_1)
    print("\n")
    print(f"Tech 2 Features: {tech2_2}")
    print("Scalability:", scalability2_2)
    print("Automation:", automation2_2)
    print("Real-time Processing:", real_time_processing2_2)
    print("Interpretability:", interpretability2_2)
    print("Efficiency:", efficiency2_2)
    print("Combined Score:", combined_score2_2)
    print("\n")
    print(f"Tech 3 Features: {tech2_3}")
    print("Scalability:", scalability2_3)
    print("Automation:", automation2_3)
    print("Real-time Processing:", real_time_processing2_3)
    print("Interpretability:", interpretability2_3)
    print("Efficiency:", efficiency2_3)
    print("Combined Score:", combined_score2_3)
    print("\n")
    print(f"Tech Group 3 Features:\n {tech_group3}")
    print(f"Tech 1 Features: {tech3_1}")
    print("Scalability:", scalability3_1)
    print("Automation:", automation3_1)
    print("Real-time Processing:", real_time_processing3_1)
    print("Interpretability:", interpretability3_1)
    print("Efficiency:", efficiency3_1)
    print("Combined Score:", combined_score3_1)
    print("\n")
    print(f"Tech 2 Features: {tech3_2}")
    print("Scalability:", scalability3_2)
    print("Automation:", automation3_2)
    print("Real-time Processing:", real_time_processing3_2)
    print("Interpretability:", interpretability3_2)
    print("Efficiency:", efficiency3_2)
    print("Combined Score:", combined_score3_2)
    print("\n")
    print(f"Tech 3 Features: {tech3_3}")
    print("Scalability:", scalability3_3)
    print("Automation:", automation3_3)
    print("Real-time Processing:", real_time_processing3_3)
    print("Interpretability:", interpretability3_3)
    print("Efficiency:", efficiency3_3)
    print("Combined Score:", combined_score3_3)
    print("\n")
    print(f"Group 1 Tech Automation scores:\n {group_1_automation}")
    #print(f"Group's Scalability Features of each tech:\n {groups_scalability}")
    print("\n")

    print("Iterating over tech groups:")
    for x in tech_groups:
        for y in x:
            for z in y:
                print(z)
    print("\n")
    print(f"Tech Location Labels\nCloud: {cloud}, Edge: {edge}, On-Premises: {on_premises}")
    print("\n")
    print("Location 1")
    print(f"In Group 1, Tech 1 is a {cloud} (Cloud) solution")
    print(f"In Group 2, Tech 1 is a {cloud} (Cloud) solution")
    print(f"In Group 3, Tech 1 is a {cloud} (Cloud) solution")
    print("\n")
    print("Location 2")
    print(f"In Group 1, Tech 1 is a {cloud} (Cloud) solution")
    print(f"In Group 2, Tech 1 is a {cloud} (Cloud) solution")
    print(f"In Group 3, Tech 1 is a {cloud} (Cloud) solution")
    print("\n")
    print("Location 1")
    print(f"In Group 1, Tech 2 is an {edge} (Edge) solution")
    print(f"In Group 2, Tech 2 is an {edge} (Edge) solution")
    print(f"In Group 3, Tech 2 is an {edge} (Edge) solution")
    print("\n")
    print("Location 2")
    print(f"In Group 1, Tech 2 is an {edge} (Edge) solution")
    print(f"In Group 2, Tech 2 is an {edge} (Edge) solution")
    print(f"In Group 3, Tech 2 is an {edge} (Edge) solution")
    print("\n")
    print("Location 1")
    print(f"In Group 1, Tech 3 is an {on_premises} (On-Premises) solution")
    print(f"In Group 2, Tech 3 is an {on_premises} (On-Premises) solution")
    print(f"In Group 3, Tech 3 is an {on_premises} (On-Premises) solution")
    print("\n")
    print("Location 2")
    print(f"In Group 1, Tech 3 is an {on_premises} (On-Premises) solution")
    print(f"In Group 2, Tech 3 is an {on_premises} (On-Premises) solution")
    print(f"In Group 3, Tech 3 is an {on_premises} (On-Premises) solution")
    print("\n")

    print("Iterating over Tech Locations Labels:")
    for x in np.nditer(tech_locations_labels):
        print(x)
    print("\n")

    
    # Slice 4D data
    tech_location2, tech_location2_g1, tech_location2_g1_1, scalability2_g1_1, automation2_g1_1, real_time_processing2_g1_1, interpretability2_g1_1, efficiency2_g1_1, combined_score2_g1_1, tech_location2_g1_2, scalability2_g1_2, automation2_g1_2, real_time_processing2_g1_2, interpretability2_g1_2, efficiency2_g1_2, combined_score2_g1_2, tech_location2_g1_3, scalability2_g1_3, automation2_g1_3, real_time_processing2_g1_3, interpretability2_g1_3, efficiency2_g1_3, combined_score2_g1_3, tech_location2_g2, tech_location2_g2_1, scalability2_g2_1, automation2_g2_1, real_time_processing2_g2_1, interpretability2_g2_1, efficiency2_g2_1, combined_score2_g2_1, tech_location2_g2_2, scalability2_g2_2, automation2_g2_2, real_time_processing2_g2_2, interpretability2_g2_2, efficiency2_g2_2, combined_score2_g2_2, tech_location2_g2_3, scalability2_g2_3, automation2_g2_3, real_time_processing2_g2_3, interpretability2_g2_3, efficiency2_g2_3, combined_score2_g2_3, tech_location2_g3, tech_location2_g3_1, scalability2_g3_1, automation2_g3_1, real_time_processing2_g3_1, interpretability2_g3_1, efficiency2_g3_1, combined_score2_g3_1, tech_location2_g3_2, scalability2_g3_2, automation2_g3_2, real_time_processing2_g3_2, interpretability2_g3_2, efficiency2_g3_2, combined_score2_g3_2, tech_location2_g3_3, scalability2_g3_3, automation2_g3_3, real_time_processing2_g3_3, interpretability2_g3_3, efficiency2_g3_3, combined_score2_g3_3, efficiency_feature_all_techs = slice_4D(tech_locations)

    # Print 4D data
    print(f"Tech Location 2 Features:\n {tech_location2}")
    print(f"Tech Group 1 Features:\n {tech_location2_g1}")
    print(f"Tech 1 Features: {tech_location2_g1_1}")
    print("Scalability:", scalability2_g1_1)
    print("Automation:", automation2_g1_1)
    print("Real-time Processing:", real_time_processing2_g1_1)
    print("Interpretability:", interpretability2_g1_1)
    print("Efficiency:", efficiency2_g1_1)
    print("Combined Score:", combined_score2_g1_1)
    print("\n")
    print(f"Tech 2 Features: {tech_location2_g1_2}")
    print("Scalability:", scalability2_g1_2)
    print("Automation:", automation2_g1_2)
    print("Real-time Processing:", real_time_processing2_g1_2)
    print("Interpretability:", interpretability2_g1_2)
    print("Efficiency:", efficiency2_g1_2)
    print("Combined Score:", combined_score2_g1_2)
    print("\n")
    print(f"Tech 3 Features: {tech_location2_g1_3}")
    print("Scalability:", scalability2_g1_3)
    print("Automation:", automation2_g1_3)
    print("Real-time Processing:", real_time_processing2_g1_3)
    print("Interpretability:", interpretability2_g1_3)
    print("Efficiency:", efficiency2_g1_3)
    print("Combined Score:", combined_score2_g1_3)
    print("\n")
    print(f"Tech Group 2 Features:\n {tech_location2_g2}")
    print(f"Tech 1 Features: {tech_location2_g2_1}")
    print("Scalability:", scalability2_g2_1)
    print("Automation:", automation2_g2_1)
    print("Real-time Processing:", real_time_processing2_g2_1)
    print("Interpretability:", interpretability2_g2_1)
    print("Efficiency:", efficiency2_g2_1)
    print("Combined Score:", combined_score2_g2_1)
    print("\n")
    print(f"Tech 2 Features: {tech_location2_g2_2}")
    print("Scalability:", scalability2_g2_2)
    print("Automation:", automation2_g2_2)
    print("Real-time Processing:", real_time_processing2_g2_2)
    print("Interpretability:", interpretability2_g2_2)
    print("Efficiency:", efficiency2_g2_2)
    print("Combined Score:", combined_score2_g2_2)
    print("\n")
    print(f"Tech 3 Features: {tech_location2_g2_3}")
    print("Scalability:", scalability2_g2_3)
    print("Automation:", automation2_g2_3)
    print("Real-time Processing:", real_time_processing2_g2_3)
    print("Interpretability:", interpretability2_g2_3)
    print("Efficiency:", efficiency2_g2_3)
    print("Combined Score:", combined_score2_g2_3)
    print("\n")
    print(f"Tech Group 3 Features:\n {tech_location2_g3}")
    print(f"Tech 1 Features: {tech_location2_g3_1}")
    print("Scalability:", scalability2_g3_1)
    print("Automation:", automation2_g3_1)
    print("Real-time Processing:", real_time_processing2_g3_1)
    print("Interpretability:", interpretability2_g3_1)
    print("Efficiency:", efficiency2_g3_1)
    print("Combined Score:", combined_score2_g3_1)
    print("\n")
    print(f"Tech 2 Features: {tech_location2_g3_2}")
    print("Scalability:", scalability2_g3_2)
    print("Automation:", automation2_g3_2)
    print("Real-time Processing:", real_time_processing2_g3_2)
    print("Interpretability:", interpretability2_g3_2)
    print("Efficiency:", efficiency2_g3_2)
    print("Combined Score:", combined_score2_g3_2)
    print("\n")
    print(f"Tech 3 Features: {tech_location2_g3_3}")
    print("Scalability:", scalability2_g3_3)
    print("Automation:", automation2_g3_3)
    print("Real-time Processing:", real_time_processing2_g3_3)
    print("Interpretability:", interpretability2_g3_3)
    print("Efficiency:", efficiency2_g3_3)
    print("Combined Score:", combined_score2_g3_3)
    print("\n")
    #print(f"Location 2 Group 3 Tech 1 Features:", location2_group3_tech1_features)
    #print("Group 2 Scalability by Location:", group2_scalability_by_location)
    print(f"Efficiency feature from all techs, groups, locations:\n {efficiency_feature_all_techs}")
    #print(f"Real-time Processing feature from all techs, groups, locations:\n {realtime_scores_loc1}")
    print("\n")

    print("Iterating over all values in Tech Locations as string types:")
    for x in np.nditer(tech_locations, flags=['buffered'], op_dtypes=['S']):
        print(x)
    print("\n")

    # Copy data
    bias_copy, bias_copy_view, sorted_feature_weights_copy, sorted_feature_weights_copy_view, performance_features_copy, performance_features_copy_view, core_feature_scores_copy, core_feature_scores_copy_view, group_1_automation_copy, group_1_automation_copy_view, efficiency_feature_all_techs_copy, efficiency_feature_all_techs_copy_view = copy_view(bias, sorted_feature_weights, performance_features, core_features_scores, group_1_automation, efficiency_feature_all_techs)

    # Print copied modified data
    print("Modified and Copied Data:")
    print("Modified Bias:", bias)
    print("Bias Copy:", bias_copy)
    print("Bias Copy View:", bias_copy_view)
    print("\n")

    print("Modified Sorted Feature Weights:", sorted_feature_weights)
    print("Sorted Feature Weights Copy:", sorted_feature_weights_copy)
    print("Sorted Feature Weights Copy View:", sorted_feature_weights_copy_view)
    print("\n")

    print("Modified Last 3 Features:", performance_features)
    print("Last 3 Features Copy:", performance_features_copy)
    print("Last 3 Features Copy View:", performance_features_copy_view)
    print("\n")

    print("Modified Core Features Scores:", core_features_scores)
    print("Core Features Scores Copy:", core_feature_scores_copy)
    print("Core Features Scores Copy View:", core_feature_scores_copy_view)
    print("\n")

    print("Iterating through Core Techs Copy with step size 2 (columns):")
    for x in np.nditer(core_feature_scores_copy[:, ::2]):
        print(x)
    print("\n")

    print("Modified group 1's Automation Features:", group_1_automation)
    print("group 1's Automation Features Copy:", group_1_automation_copy)
    print("group 1's Automation Features Copy View:", group_1_automation_copy_view)
    print("\n")

    print("Modified Efficiency feature from all techs, groups, locations:", efficiency_feature_all_techs)
    print("Efficiency feature from all techs, groups, locations Copy:", efficiency_feature_all_techs_copy)
    print("Efficiency feature from all techs, groups, locations Copy View:", efficiency_feature_all_techs_copy_view)
    print("\n")

    reshaped_sorted_feature_weights, reshaped_performance_features, reshaped_core_feature_scores, reshaped_group_1_automation, reshaped_efficiency_feature_all_techs = reshape_array(sorted_feature_weights_copy, performance_features_copy, core_feature_scores_copy, group_1_automation_copy, efficiency_feature_all_techs_copy)

    # Print reshaped data
    print("Reshaped Data:")
    print("Reshaped Sorted Feature Weights:", reshaped_sorted_feature_weights)

    print("\nIndex and value pairs from reshaped feature importance:")
    for idx, x in np.ndenumerate(reshaped_sorted_feature_weights):
        print(f"Index: {idx}, Value: {x}")

    print("\nReshaped scalability, real-time processing, efficiency features of one tech", reshaped_performance_features)

    print("\nIndex and value pairs from features:")
    for idx, x in np.ndenumerate(reshaped_performance_features):
        print(f"Index: {idx}, Value: {x}")

    print('\n')
    print("Reshaped automation and interpretability scores:", reshaped_core_feature_scores)
    print("Reshaped Group 1's Automation:", reshaped_group_1_automation)
    print("Reshaped Efficiency Feature from All Techs:", reshaped_efficiency_feature_all_techs)
    print("\n")

    # Join data

'''
    # Split data
    print("\nSplitting Data for Feature Analysis:")
    weight_batches, tech_batches, tech_groups_batches, tech_locations_batches = split(weights_copy, techs_copy, tech_groups_copy, tech_locations_copy)
    # Print split weights
    print("Split Data for Feature Analysis:")
    print("Scaling & Speed weight batch:", weight_batches[0])
    print("Process Automation weight batch:", weight_batches[1])
    print("Explainability weight batch:", weight_batches[2])
    print("\n")
    print("Scaling & Speed batch:", tech_batches[0])
    print("Process Automation batch:", tech_batches[1])
    print("Explainability batch:", tech_batches[2])
    print("\n")
    print("Scaling & Speed batch from Tech Groups:", tech_groups_batches[0])
    print("Process Automation batch from Tech Groups:", tech_groups_batches[1])
    print("Explainability batch fromTech Groups:", tech_groups_batches[2])
    print("\n")
    print("Scaling & Speed batch from Tech Locations:", tech_locations_batches[0])
    print("Process Automation batch from Tech Locations:", tech_locations_batches[1])
    print("Explainability batch from Tech Locations:", tech_locations_batches[2])

    # Search data
    passing_features, failing_features, top_techs = search(tech_locations_copy)

    # Print search results
    print("\nPassing Features in Tech Locations:")
    print("Indices of Passing Features:", passing_features)
    print("Passing features:", tech_locations[passing_features])
    print("\nFailing Features in Tech Locations:")
    print("Indices of Failing Features:", failing_features)
    print("Failing features:", tech_locations[failing_features])
    print("\n")
    print("Top Techs in all Locations:", top_techs)
    print("\n")

    # Sort data
    sorted_locations = sort(tech_locations_copy)
    print("Sorted Tech Locations:")
    print(sorted_locations)
'''
main()